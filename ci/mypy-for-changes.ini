# Used by ci/mypy-reviewdog-local.sh to run mypy on the changed files in a PR.
[mypy]
files=.
ignore_missing_imports = True
pretty = true
mypy_path = "."
error_summary = true
strict_equality = true
show_error_codes = true
# Workaround for reviewdog matcher expression issue:
# For filtering out errors that are not relevant to the current changes,
# reviewdog requires that the error context is not shown:
show_error_context = false
# Check the contents of untyped functions in all modules by default:
check_untyped_defs = true
scripts_are_modules = true
python_version = 3.11
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_redundant_casts = true
disallow_any_explicit = false
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true

#
# These are the error codes that are disabled by default to make the output of
# mypy --config=ci/mypy-for-changes.ini more readable.
#
# mypy --config=ci/mypy-for-changes.ini is used in conjunction with reviewdog
# to filter out errors that are not relevant to the current changes.
# And of course, the CI should not fail because a change is on a line that is
# that treiggers e.g. a name-defined error because of a `from snack import *`
# statement where `snack.py` in not available that is not relevant to the change.
#
# If you want to enable any of these errors, you can remove them
# from the list below.
#
# - name-defined: This error is disabled because it currently overwhlems the
#   user with too many errors. This error is disabled to make the output more
#   readable. It is largely caused by the fact that we use `from module import
#   *` in many places and mypy cannot infer the types of the imported names
#   because of this, it is not possible to enable this error without adding
#   typing stubs for newt/snack.py and for version.py.
#
#   Adding those stubs would be a good next step to enable this error message.
#
disable_error_code =
     name-defined,
#     arg-type,
#     assignment
